# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tested.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



#https://algotrading101.com/learn/yahoo-finance-api-guide/
import yfinance as yf
import yahoo_fin.stock_info as si
import pandas as pd
import requests
from tested import *
import sys

from PyQt5.QtCore import QAbstractTableModel, Qt
from datetime import date
import csv


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1161, 787)
        MainWindow.setStyleSheet("background-color: qconicalgradient(cx:0, cy:0, angle:135, stop:0 rgba(255, 255, 0, 69), stop:0.375 rgba(255, 255, 0, 69), stop:0.423533 rgba(251, 255, 0, 145), stop:0.45 rgba(247, 255, 0, 208), stop:0.477581 rgba(255, 244, 71, 130), stop:0.518717 rgba(255, 218, 71, 130), stop:0.55 rgba(255, 255, 0, 255), stop:0.57754 rgba(255, 203, 0, 130), stop:0.625 rgba(255, 255, 0, 69), stop:1 rgba(255, 255, 0, 69));")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.AddTicker = QtWidgets.QCommandLinkButton(self.centralwidget)
        self.AddTicker.setGeometry(QtCore.QRect(250, 60, 131, 41))
        self.AddTicker.setStyleSheet("\n"
"\n"
"background-color: rgb(0, 170, 255);")
        self.AddTicker.setObjectName("AddTicker")
        self.InsertField = QtWidgets.QLineEdit(self.centralwidget)
        self.InsertField.setGeometry(QtCore.QRect(90, 60, 151, 31))
        self.InsertField.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.InsertField.setObjectName("InsertField")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(420, 30, 311, 231))
        self.textBrowser.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser.setObjectName("textBrowser")
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(30, 270, 1041, 401))
        self.tableView.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tableView.setObjectName("tableView")
        self.EvaluateButton = QtWidgets.QPushButton(self.centralwidget)
        self.EvaluateButton.setGeometry(QtCore.QRect(60, 120, 201, 41))
        self.EvaluateButton.setStyleSheet("background-color: rgb(0, 170, 255);\n"
"font: 14pt \"MS Shell Dlg 2\";")
        self.EvaluateButton.setObjectName("EvaluateButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 10, 311, 31))
        self.label.setStyleSheet("font: 14pt \"MS Shell Dlg 2\";")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 60, 71, 31))
        self.label_2.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";")
        self.label_2.setObjectName("label_2")
        self.EvaluationProgress = QtWidgets.QProgressBar(self.centralwidget)
        self.EvaluationProgress.setGeometry(QtCore.QRect(290, 130, 118, 23))
        self.EvaluationProgress.setProperty("value", 24)
        self.EvaluationProgress.setObjectName("EvaluationProgress")
        self.ExportButton = QtWidgets.QPushButton(self.centralwidget)
        self.ExportButton.setGeometry(QtCore.QRect(60, 180, 201, 41))
        self.ExportButton.setStyleSheet("background-color: rgb(0, 170, 255);\n"
"font: 14pt \"MS Shell Dlg 2\";")
        self.ExportButton.setObjectName("ExportButton")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(430, 0, 301, 21))
        self.label_3.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";")
        self.label_3.setObjectName("label_3")
        self.ClearButton = QtWidgets.QPushButton(self.centralwidget)
        self.ClearButton.setGeometry(QtCore.QRect(740, 30, 201, 41))
        self.ClearButton.setStyleSheet("background-color: rgb(0, 170, 255);\n"
"font: 14pt \"MS Shell Dlg 2\";")
        self.ClearButton.setObjectName("ClearButton")
        self.RemoveLastButton = QtWidgets.QPushButton(self.centralwidget)
        self.RemoveLastButton.setGeometry(QtCore.QRect(740, 80, 201, 41))
        self.RemoveLastButton.setStyleSheet("background-color: rgb(0, 170, 255);\n"
"font: 14pt \"MS Shell Dlg 2\";")
        self.RemoveLastButton.setObjectName("RemoveLastButton")
        self.ForecastButton = QtWidgets.QPushButton(self.centralwidget)
        self.ForecastButton.setGeometry(QtCore.QRect(30, 680, 201, 41))
        self.ForecastButton.setStyleSheet("\n"
"background-color: rgb(85, 255, 0);\n"
"font: 14pt \"MS Shell Dlg 2\";")
        self.ForecastButton.setObjectName("ForecastButton")
        self.WikiButton = QtWidgets.QPushButton(self.centralwidget)
        self.WikiButton.setGeometry(QtCore.QRect(240, 680, 201, 41))
        self.WikiButton.setStyleSheet("background-color: rgb(85, 255, 0);\n"
"font: 14pt \"MS Shell Dlg 2\";")
        self.WikiButton.setObjectName("WikiButton")
        self.DirectoryPath = QtWidgets.QLineEdit(self.centralwidget)
        self.DirectoryPath.setGeometry(QtCore.QRect(740, 210, 231, 41))
        self.DirectoryPath.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.DirectoryPath.setObjectName("DirectoryPath")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(740, 140, 301, 21))
        self.label_4.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";")
        self.label_4.setObjectName("label_4")
        self.ImportButton = QtWidgets.QPushButton(self.centralwidget)
        self.ImportButton.setGeometry(QtCore.QRect(980, 210, 121, 41))
        self.ImportButton.setStyleSheet("background-color: rgb(0, 170, 255);\n"
"font: 10pt \"MS Shell Dlg 2\";\n"
"")
        self.ImportButton.setObjectName("ImportButton")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(740, 180, 241, 16))
        self.label_5.setStyleSheet("font: 10pt \"MS Shell Dlg 2\";")
        self.label_5.setObjectName("label_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1161, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.AddTicker.setText(_translate("MainWindow", "Insert "))
        self.EvaluateButton.setText(_translate("MainWindow", "Evaluate"))
        self.label.setText(_translate("MainWindow", "Tool for stock evaluation"))
        self.label_2.setText(_translate("MainWindow", "Ticker:"))
        self.ExportButton.setText(_translate("MainWindow", "Export to excel"))
        self.label_3.setText(_translate("MainWindow", "Current instrument list:"))
        self.ClearButton.setText(_translate("MainWindow", "Clear list"))
        self.RemoveLastButton.setText(_translate("MainWindow", "Remove last"))
        self.ForecastButton.setText(_translate("MainWindow", "Forecast"))
        self.WikiButton.setText(_translate("MainWindow", "Ratio explanation"))
        self.label_4.setText(_translate("MainWindow", "Import tickers from csv file:"))
        self.ImportButton.setText(_translate("MainWindow", "Add tickers"))
        self.label_5.setText(_translate("MainWindow", "Please provide csv file directory"))


def my_valuation(ticker):
    # Quote table
    try:
        key_attributes_quote = ['PE Ratio (TTM)', 'Beta (5Y Monthly)', '1y Target Est', 'EPS (TTM)', 'Previous Close',
                                'Market Cap']
        quote = si.get_quote_table(ticker)
        attr_results = []
        for attribute in key_attributes_quote:
            attr_results.append(quote[attribute])
        attr_results_df = pd.DataFrame([attr_results], columns=key_attributes_quote)
        attr_results_df['Ticker'] = ticker

        # Stats table
        stats_table = si.get_stats(ticker)
        stats_table = stats_table.iloc[[22, 24, 46, 47, 48], :].transpose()
        stats_table.columns = stats_table.iloc[0, :]
        stats_table = stats_table.iloc[1, :]
        stats_table = pd.DataFrame(stats_table)
        stats_table = stats_table.transpose().reset_index(drop=True)

        # Stats valuation
        val = si.get_stats_valuation(ticker).transpose()
        val.columns = val.iloc[0, :]
        val = val.iloc[1, :]
        val = pd.DataFrame(val)
        val = val.transpose().reset_index(drop=True)
        # Analysts recommendation
        lhs_url = 'https://query2.finance.yahoo.com/v10/finance/quoteSummary/'
        rhs_url = '?formatted=true&crumb=swg7qs5y9UP&lang=en-US&region=US&'               'modules=upgradeDowngradeHistory,recommendationTrend,'               'financialData,earningsHistory,earningsTrend,industryTrend&'               'corsDomain=finance.yahoo.com'

        url = lhs_url + ticker + rhs_url
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
        r = requests.get(url, headers=headers)
        if not r.ok:
            recommendation = 6
        try:
            result = r.json()['quoteSummary']['result'][0]
            recommendation = result['financialData']['recommendationMean']['fmt']
        except:
            recommendation = 6
        stats_table['Recommendation'] = recommendation

        # Adding business summary
        comp_ticker = yf.Ticker(ticker)
        stats_table['Company Summary'] = comp_ticker.info['longBusinessSummary']

        # join
        horizontal_stack = pd.concat([stats_table, val, attr_results_df], axis=1)

        # Changing columns order
        cols = horizontal_stack.columns.tolist()
        cols = cols[-1:] + cols[:-1]
        horizontal_stack = horizontal_stack[cols]
        return horizontal_stack
    except:
        return pd.DataFrame()


def ResultJoin(my_list):
    instrument_results = pd.DataFrame()
    for ticker in my_list:
        temp = my_valuation(ticker)
        instrument_results = pd.concat([instrument_results, temp], axis=0)
    return instrument_results


def ExportToExcel(instrument_results):
    global export_num
    export_num = export_num + 1
    instrument_results.to_excel('results_' + str(date.today()) + '_' + str(export_num) + '.xlsx', index=False)


class pandasModel(QAbstractTableModel):

    def __init__(self, data):
        QAbstractTableModel.__init__(self)
        self._data = data

    def rowCount(self, parent=None):
        return self._data.shape[0]

    def columnCount(self, parent=None):
        return self._data.shape[1]

    def data(self, index, role=Qt.DisplayRole):
        if index.isValid():
            if role == Qt.DisplayRole:
                return str(self._data.iloc[index.row(), index.column()])
            return None

    def headerData(self, col, orientation, role):
        if orientation == Qt.Horizontal and role == Qt.DisplayRole:
            return self._data.columns[col]
        return None


class FirstApp(Ui_MainWindow):
    def __init__(self, window):
        self.setupUi(window)
        self.textBrowser.setText('Welcome')
        self.AddTicker.clicked.connect(self.showInstrument)
        self.EvaluateButton.clicked.connect(self.Evaluate)
        self.ClearButton.clicked.connect(self.ClearContent)
        self.ExportButton.clicked.connect(self.ExportContent)
        self.EvaluationProgress.setValue(0)
        self.RemoveLastButton.clicked.connect(self.Removal)
        self.ImportButton.clicked.connect(self.ImportData)

    def showInstrument(self):
        instrument_list.append(self.InsertField.text())
        string = ''
        for item in instrument_list:
            if string == '':
                string = item + ', '
            else:
                string = string + item + ', '
        self.textBrowser.setText(string)

    def Evaluate(self):
        global Final_df
        # Final_df = ResultJoin(instrument_list)
        Final_df = pd.DataFrame()
        i = 0
        for ticker in instrument_list:
            temp = my_valuation(ticker)
            Final_df = pd.concat([Final_df, temp], axis=0)
            i = i + 1
            progress = int(i / len(instrument_list) * 100)
            self.EvaluationProgress.setValue(progress)
        model = pandasModel(Final_df)
        self.tableView.setModel(model)

    def ClearContent(self):
        global instrument_list
        instrument_list = []
        self.textBrowser.setText('')

    def ExportContent(self):
        ExportToExcel(Final_df)

    def Removal(self):
        global instrument_list
        instrument_list.pop()
        string = ''
        for item in instrument_list:
            if string == '':
                string = item + ', '
            else:
                string = string + item + ', '
        self.textBrowser.setText(string)

    def ImportData(self):
        global instrument_list
        path = self.DirectoryPath.text()
        with open(path, newline='') as f:
            reader = csv.reader(f)
            data = list(reader)
        instrument_list = []
        for elem in data:
            instrument_list.append(elem[0])
        string = ''
        for item in instrument_list:
            if string == '':
                string = item + ', '
            else:
                string = string + item + ', '
        self.textBrowser.setText(string)


instrument_list = []
export_num = 0

app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()

ui = FirstApp(MainWindow)
MainWindow.show()
app.exec_()